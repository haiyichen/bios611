mutate(Cluster = as.factor(kmeans_result$cluster))
# Plot the PCA scatter plot with clusters
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Cluster, label = Squad)) +
geom_point(size = 4, alpha = 0.8) +  # Scatter points
geom_text(vjust = -0.5, hjust = 0.5, size = 3) +  # Add team names
labs(
title = "K-Means Clustering on PCA",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster"
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Cluster, label = Standing)) +
geom_point(size = 4, alpha = 0.8) +  # Scatter points
geom_text(vjust = -0.5, hjust = 0.5, size = 3) +  # Add team names
labs(
title = "K-Means Clustering on PCA",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster"
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Cluster, label = data$Standing)) +
geom_point(size = 4, alpha = 0.8) +  # Scatter points
geom_text(vjust = -0.5, hjust = 0.5, size = 3) +  # Add team names
labs(
title = "K-Means Clustering on PCA",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster"
) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave("knn.png", plot3, width =10,height =6,dpi = 200 )
plot3 <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Cluster, label = data$Standing)) +
geom_point(size = 4, alpha = 0.8) +
geom_text(vjust = -0.5, hjust = 0.5, size = 3) +
labs(
title = "K-Means Clustering on PCA",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster"
) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave("knn.png", plot3, width =10,height =6,dpi = 200 )
plot3 <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Cluster, label = data$Standing)) +
geom_point(size = 4, alpha = 0.8) +
geom_text(vjust = 0.5, hjust = 0.5, size = 3) +
labs(
title = "K-Means Clustering on PCA",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster"
) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave("knn.png", plot3, width =10,height =6,dpi = 200 )
plot3
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Cluster, label = data$Standing)) +
geom_point(size = 4, alpha = 0.8) +
geom_text(vjust = -0.5, hjust = 1, size = 3) +
labs(
title = "K-Means Clustering on PCA",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster"
) +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Cluster, label = data$Standing)) +
geom_point(size = 4, alpha = 0.8) +
geom_text(vjust = -0.5, hjust = 1.5, size = 3) +
labs(
title = "K-Means Clustering on PCA",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster"
) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave("knn.png", plot3, width =10,height =6,dpi = 200 )
ggplot(pca_scores, aes(x = PC1, y = PC2, color = Cluster, label = data$Standing)) +
geom_point(size = 4, alpha = 0.8) +
geom_text(vjust = -1, hjust = 0.5, size = 3) +
labs(
title = "K-Means Clustering on PCA",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster"
) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave("knn.png", plot3, width =10,height =6,dpi = 200 )
plot3 <- ggplot(pca_scores, aes(x = PC1, y = PC2, color = Cluster, label = data$Standing)) +
geom_point(size = 4, alpha = 0.8) +
geom_text(vjust = -1, hjust = 0.5, size = 3) +
labs(
title = "K-Means Clustering on PCA",
x = "Principal Component 1",
y = "Principal Component 2",
color = "Cluster"
) +
theme_minimal() +
theme(legend.position = "bottom")
ggsave("knn.png", plot3, width =10,height =6,dpi = 200 )
shooting <- shooting %>% select(-NPl) %>% select(where(~ all(!is.na(.))))
data <- merge(defend, passing, by=common_columns)
data <- merge(data, possession, by= common_columns)
data <- merge(data, shooting, by = common_columns)
data <- merge(data, shooting, by = common_columns)
data <- merge(defend, passing, by=common_columns)
data <- merge(data, possession, by= common_columns)
data <- merge(data, shooting, by = common_columns)
defend <- import("data/england_premier_league_squad_defensive_actions_22.csv")
passing <-import("data/england_premier_league_squad_passing_stats_22.csv")
possession <- import("data/england_premier_league_squad_possession_22.csv")
shooting <- import("data/england_premier_league_squad_shooting_22.csv")
data <- merge(defend, passing, by=common_columns)
data <- merge(data, possession, by= common_columns)
data <- merge(data, shooting, by = common_columns)
data<-data %>% select(-NPl) %>% select(where(~ all(!is.na(.))))
data$Standing <- c(4, 14, 13, 9, 18, 3, 12, 16, 17, 8, 2, 1, 6, 11, 20, 15, 4, 19, 7, 10)
library(randomForest)
?randomForest
defend %<% defend %>% select(-NPl) %>% select(where(~ all(!is.na(.))))
defend <- defend %>% select(-NPl) %>% select(where(~ all(!is.na(.))))
passing <- passing %>% select(-NPl) %>% select(where(~ all(!is.na(.))))
possession <- possession %>% select(-NPl) %>% select(where(~ all(!is.na(.))))
shooting <- shooting %>% select(-NPl) %>% select(where(~ all(!is.na(.))))
extract_pc1 <- function(data, exclude_cols) {
pca_data <- data %>% select(-all_of(exclude_cols)) %>% drop_na()
pca_result <- prcomp(pca_data, center = TRUE, scale. = TRUE)
return(as.data.frame(pca_result$x[, 1, drop = FALSE]) %>% rename(PC1 = V1))
}
defend_pc <- extract_pc1(defend, exclude_cols = c("Squad", "Standing"))
defend <- defend %>% select(-NPl) %>% select(where(~ all(!is.na(.)))) %>% mutate(Standing = data$Standing)
defend <- import("data/england_premier_league_squad_defensive_actions_22.csv")
passing <-import("data/england_premier_league_squad_passing_stats_22.csv")
possession <- import("data/england_premier_league_squad_possession_22.csv")
shooting <- import("data/england_premier_league_squad_shooting_22.csv")
setwd("D:/study/UNC_Biostatistics/2024 fall/BIOS 611/project")
# each rows is written in a cell in the csv files. need to use this function to import.
import <- function(file_path) {
lines <- readLines(file_path)
split_lines <- strsplit(lines, ";")
max_columns <- length(split_lines[[1]])
split_lines <- lapply(split_lines, function(row) {
length(row) <- max_columns
row
})
df <- do.call(rbind, lapply(split_lines, function(x) as.data.frame(t(x), stringsAsFactors = FALSE)))
colnames(df) <- df[1, ]
df <- df[-1, ]
df <- data.frame(lapply(df, function(x) {
if (all(!is.na(as.numeric(x)))) as.numeric(x) else x
}), stringsAsFactors = FALSE)
return(df)
}
defend <- import("data/england_premier_league_squad_defensive_actions_22.csv")
passing <-import("data/england_premier_league_squad_passing_stats_22.csv")
possession <- import("data/england_premier_league_squad_possession_22.csv")
shooting <- import("data/england_premier_league_squad_shooting_22.csv")
defend <- defend %>% select(-NPl) %>% select(where(~ all(!is.na(.)))) %>% mutate(Standing = data$Standing)
passing <- passing %>% select(-NPl) %>% select(where(~ all(!is.na(.)))) %>% mutate(Standing = data$Standing)
possession <- possession %>% select(-NPl) %>% select(where(~ all(!is.na(.)))) %>% mutate(Standing = data$Standing)
shooting <- shooting %>% select(-NPl) %>% select(where(~ all(!is.na(.)))) %>% mutate(Standing = data$Standing)
defend_pc <- extract_pc1(defend, exclude_cols = c("Squad", "Standing"))
extract_pc1 <- function(data, exclude_cols) {
# Select numeric columns and exclude specified columns
pca_data <- data %>% select(-all_of(exclude_cols)) %>% drop_na()
# Perform PCA
pca_result <- prcomp(pca_data, center = TRUE, scale. = TRUE)
# Extract the first principal component (PC1)
pc1 <- pca_result$x[, 1]  # First column corresponds to PC1
# Return a data frame with PC1
return(data.frame(PC1 = pc1))
}
defend_pc <- extract_pc1(defend, exclude_cols = c("Squad", "Standing"))
passing_pc <- extract_pc1(passing, exclude_cols = c("Squad", "Standing"))
extract_pc1 <- function(data, exclude_cols) {
# Select numeric columns and exclude specified columns
pca_data <- data %>% select(-all_of(exclude_cols)) %>% drop_na()
# Remove constant or zero-variance columns
pca_data <- pca_data[, apply(pca_data, 2, var) > 0]
# Perform PCA
pca_result <- prcomp(pca_data, center = TRUE, scale. = TRUE)
# Extract the first principal component (PC1)
pc1 <- pca_result$x[, 1]  # First column corresponds to PC1
# Return a data frame with PC1
return(data.frame(PC1 = pc1))
}
defend_pc <- extract_pc1(defend, exclude_cols = c("Squad", "Standing"))
passing_pc <- extract_pc1(passing, exclude_cols = c("Squad", "Standing"))
possession_pc <- extract_pc1(possession, exclude_cols = c("Squad", "Standing"))
shooting_pc <- extract_pc1(shooting, exclude_cols = c("Squad", "Standing"))
combined_data <- combined_data %>%
mutate(Standing_Binary = if_else(as.numeric(Standing) <= 10, 1, 0)) %>%
select(-Standing)
combined_data <- data.frame(
Squad = defend$Squad,
Standing = defend$Standing,
Defend_PC1 = defend_pc$PC1,
Passing_PC1 = passing_pc$PC1,
Possession_PC1 = possession_pc$PC1,
Shooting_PC1 = shooting_pc$PC1
)
combined_data <- combined_data %>%
mutate(Standing_Binary = if_else(as.numeric(Standing) <= 10, 1, 0)) %>%
select(-Standing)
# Random Forest
set.seed(123)
rf_model <- randomForest(
Standing_Binary ~ . - Squad,
data = combined_data,
mtry = 2,
importance = TRUE
)
combined_data$Standing_Binary
combined_data <- combined_data %>%
mutate(Standing_Binary = if_else(as.numeric(Standing) <= 10, 1, 0)) %>%
select(-Standing)  %>%
mutate(Standing_Binary = as.factor(Standing_Binary))
combined_data <- data.frame(
Squad = defend$Squad,
Standing = defend$Standing,
Defend_PC1 = defend_pc$PC1,
Passing_PC1 = passing_pc$PC1,
Possession_PC1 = possession_pc$PC1,
Shooting_PC1 = shooting_pc$PC1
)
combined_data <- combined_data %>%
mutate(Standing_Binary = if_else(as.numeric(Standing) <= 10, 1, 0)) %>%
select(-Standing)  %>%
mutate(Standing_Binary = as.factor(Standing_Binary))
# Random Forest
set.seed(123)
rf_model <- randomForest(
Standing_Binary ~ . - Squad,
data = combined_data,
mtry = 2,
importance = TRUE
)
print(rf_model)
importance_df <- as.data.frame(importance(rf_model))
importance_df <- importance_df %>%
rownames_to_column(var = "Feature") %>%
arrange(desc(MeanDecreaseGini))
# Display feature importance
print(importance_df)
# Plot feature importance
ggplot(importance_df, aes(x = reorder(Feature, MeanDecreaseGini), y = MeanDecreaseGini)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(
title = "Feature Importance (Random Forest)",
x = "Feature",
y = "Mean Decrease in Gini Index"
) +
theme_minimal()
plot4 <- ggplot(importance_df, aes(x = reorder(Feature, MeanDecreaseGini), y = MeanDecreaseGini)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +
labs(
title = "Feature Importance (Random Forest)",
x = "Feature",
y = "Mean Decrease in Gini Index"
) +
theme_minimal()
ggsave("importance.png", plot4, width =5,height =3,dpi = 200 )
knitr::opts_chunk$set(echo = TRUE)
winordraw_home <- read.csv("winordraw_home.csv")
knitr::kable(winordraw_home, caption = "Home Coefficient by Team")
knitr::include_graphics("box.png")
library(tidyverse)
library(lme4)
library(broom)
library(glmmTMB)
library(broom.mixed)
setwd("D:/study/UNC_Biostatistics/2024 fall/BIOS 611/project")
match <- read.csv("data/2021-2022.csv")
match <- match %>%
select(which(names(.) %in% c("HomeTeam", "AwayTeam", "FTHG", "FTAG", "FTR", "HTHG", "HTAG", "HTR", "HS", "AS", "HST", "AST", "HC", "AC", "HF", "AF", "HY", "AY", "HR", "AR", "HBP", "ABP")))
# Create the home team dataset
home_data <- match %>%
select(HomeTeam, FTHG, FTR, HST, HS, HC, HF, HY, HR) %>%
rename(
Goal = FTHG,
Team = HomeTeam,
Shots = HS,
ShotsOnTarget = HST,
Corners = HC,
Fouls = HF,
YellowCards = HY,
RedCards = HR
) %>%
mutate(Location = "Home")  # Add location indicator
# Create the away team dataset
away_data <- match %>%
select(AwayTeam, FTAG, FTR, AST, AS, AC, AF, AY, AR) %>%
rename(
Goal = FTAG,
Team = AwayTeam,
Shots = AS,
ShotsOnTarget = AST,
Corners = AC,
Fouls = AF,
YellowCards = AY,
RedCards = AR
) %>%
mutate(Location = "Away")  # Add location indicator
# Combine home and away datasets
data <- bind_rows(home_data, away_data)
# Create an indicator variable for win or draw
data <- data %>%
mutate(
WinOrDraw = ifelse((FTR == "H" & Location == "Home") |
(FTR == "D") |
(FTR == "A" & Location == "Away"), 1, 0)
)
# Remove unnecessary FTR column if not needed for the model
data <- data %>% select(-FTR)
# Question 1
teams <- unique(data$Team)
results <- teams %>%
lapply(function(team) {
# Subset data for the team
team_data <- data %>% filter(Team == team) %>%
mutate(
Location = as.factor(Location),
WinOrDraw = as.factor(WinOrDraw),
)%>%select(-Team)
# Fit logistic regression
model <- glm(WinOrDraw ~ ., data = team_data, family = binomial)
# Extract the p-value for Location effect
tidy(model) %>%
filter(term == "LocationHome") %>%
mutate(Team = team)
}) %>%
bind_rows()
results_adjusted <- results %>%
mutate(p_adjusted = p.adjust(p.value, method = "fdr"))
write.csv(results, "winordraw_home.csv", row.names = FALSE)
write.csv(results, "winordraw_home_adjusted.csv", row.names = FALSE)
# Question 2
data$Location <- as.factor(data$Location)
fixed_effects <- paste(
setdiff(names(data), c("WinOrDraw", "Team", "RedCards", "YellowCards")),  # Exclude these
collapse = " + "
)
fixed_effects_formula <- as.formula(paste("~", fixed_effects))
model_red_cards <- glmmTMB(
as.formula(paste("RedCards ~", fixed_effects, "+ (1 | Team)")),  # Fixed effects + random intercept
ziformula = ~1,  # Zero-inflation component
family = poisson,
data = data
)
# Zero-inflated Poisson for Yellow Cards
model_yellow_cards <- glmmTMB(
as.formula(paste("YellowCards ~", fixed_effects, "+ (1| Team)")),  # Fixed effects + random intercept
ziformula = ~1,  # Zero-inflation component
family = poisson,
data = data
)
model_yellow_cards <- glmmTMB(
as.formula(paste("YellowCards ~", fixed_effects, "+ (1| Team)")),  # Fixed effects + random intercept
ziformula = ~1,  # Zero-inflation component
family = poisson,
data = data
)
# Extract fixed effects from the model
fixed_effects_yellow <- tidy(model_red_cards, effects = "fixed")
fixed_effects_red <- tidy(model_red_cards, effects = "fixed")
write.csv(fixed_effects_yellow, "fixed_effects_yellow.csv", row.names = FALSE)
write.csv(fixed_effects_red, "fixed_effects_red.csv", row.names = FALSE)
# Question 3
fixed_effects <- paste(
setdiff(names(data), c("WinOrDraw", "Team", "Goal")),  # Exclude these
collapse = " + "
)
fixed_effects_formula <- as.formula(paste("~", fixed_effects))
model_goal <- glmmTMB(
as.formula(paste("Goal ~", fixed_effects, "+ (1 | Team)")),
family = poisson,
data = data
)
fixed_effects_goal <- tidy(model_goal, effects = "fixed")
write.csv(fixed_effects_goal, "fixed_effects_goal.csv", row.names = FALSE)
library(tidyverse)
setwd("D:/study/UNC_Biostatistics/2024 fall/BIOS 611/project")
match <- read.csv("data/2021-2022.csv")
match <- match %>%
select(which(names(.) %in% c("HomeTeam", "AwayTeam", "FTHG", "FTAG", "FTR", "HTHG", "HTAG", "HTR", "HS", "AS", "HST", "AST", "HC", "AC", "HF", "AF", "HY", "AY", "HR", "AR", "HBP", "ABP")))
# Add lables to the varaibles
variable_labels <- c(
"FTHG"="Home Goal",
"FTAG"="Away Goal",
"HS" = "Home Shots",
"AS" = "Away Shots",
"HST" = "Home Shots on Target",
"AST" = "Away Shots on Target",
"HC" = "Home Corners",
"AC" = "Away Corners",
"HF" = "Home Fouls",
"AF" = "Away Fouls",
"HY" = "Home Yellow Cards",
"AY" = "Away Yellow Cards",
"HR" = "Home Red Cards",
"AR" = "Away Red Cards"
)
numeric_vars <- match %>% select(where(is.numeric))
categorical_vars <- match %>% select(where(~ is.character(.) | is.factor(.)))
numeric_long <- numeric_vars %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value")
home_away_vars <- match %>%
select(names(variable_labels)) %>%
pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value")
home_away_vars <- home_away_vars %>%
mutate(
Team = if_else(str_detect(Variable, "^H"), "Home", "Away"),
DescriptiveLabel = variable_labels[Variable]
)
plot1 <- ggplot(home_away_vars, aes(x = DescriptiveLabel, y = Value, fill = Team)) +
geom_boxplot() +
labs(
title = "Comparison of Home and Away Statistics",
x = "Variable",
y = "Value",
fill = "Team"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Bar plot
ftr_counts <- as.data.frame(table(match$FTR))
colnames(ftr_counts) <- c("Result", "Count")
# Replace levels with descriptive labels
ftr_counts$Result <- factor(ftr_counts$Result,
levels = c("H", "D", "A"),
labels = c("Home Win", "Draw", "Away Win"))
# Calculate percentages
ftr_counts$Percentage <- round((ftr_counts$Count / sum(ftr_counts$Count)) * 100, 1)
# Create a pie chart with percentages
plot2 <- ggplot(ftr_counts, aes(x = "", y = Count, fill = Result)) +
geom_bar(stat = "identity", width = 1, color = "white") +
coord_polar("y") +
geom_text(aes(label = paste0(Percentage, "%")),
position = position_stack(vjust = 0.5), size = 5) +
labs(
title = "Full-Time Results",
fill = "Result"
) +
theme_void() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
ggsave("box.png", plot1, width =10,height =6,dpi = 200 )
ggsave("pie.png", plot2, width =8,height =5,dpi = 200 )
knitr::include_graphics("box.png")
knitr::include_graphics("pie.png")
winordraw_home <- read.csv("winordraw_home.csv")
knitr::kable(winordraw_home, caption = "Home Coefficient by Team")
winordraw_home <- read.csv("winordraw_home_adjust.csv")
winordraw_home <- read.csv("winordraw_home_adjusted.csv")
knitr::kable(winordraw_home, caption = "Home Coefficient by Team")
winordraw_home <- read.csv("winordraw_home_adjusted.csv")
knitr::kable(winordraw_home, caption = "Home Coefficient by Team")
write.csv(results, "winordraw_home.csv", row.names = FALSE)
write.csv(results_adjusted, "winordraw_home_adjusted.csv", row.names = FALSE)
winordraw_home <- read.csv("winordraw_home_adjusted.csv")
knitr::kable(winordraw_home, caption = "Home Coefficient by Team")
yellow <- read.csv("fixed_effect_yellow.csv")
yellow <- read.csv("fixed_effects_yellow.csv")
knitr::kable(yellow, caption = "Home Coefficient for Yellow Cards")
red <- read.csv("fixed_effects_red.csv")
knitr::kable(red, caption = "Home Coefficient for Red Cards")
goal <- read.csv("fixed_effects_goal.csv")
knitr::kable(goal, caption = "Home Coefficient for Goal")
library(tidyverse)
library(ggplot2)
library(randomForest)
setwd("D:/study/UNC_Biostatistics/2024 fall/BIOS 611/project")
# each rows is written in a cell in the csv files. need to use this function to import.
import <- function(file_path) {
lines <- readLines(file_path)
split_lines <- strsplit(lines, ";")
max_columns <- length(split_lines[[1]])
split_lines <- lapply(split_lines, function(row) {
length(row) <- max_columns
row
})
df <- do.call(rbind, lapply(split_lines, function(x) as.data.frame(t(x), stringsAsFactors = FALSE)))
colnames(df) <- df[1, ]
df <- df[-1, ]
df <- data.frame(lapply(df, function(x) {
if (all(!is.na(as.numeric(x)))) as.numeric(x) else x
}), stringsAsFactors = FALSE)
return(df)
}
defend <- import("data/england_premier_league_squad_defensive_actions_22.csv")
passing <-import("data/england_premier_league_squad_passing_stats_22.csv")
possession <- import("data/england_premier_league_squad_possession_22.csv")
shooting <- import("data/england_premier_league_squad_shooting_22.csv")
data <- merge(defend, passing, by=common_columns)
data <- merge(data, possession, by= common_columns)
data <- merge(data, shooting, by = common_columns)
data<-data %>% select(-NPl) %>% select(where(~ all(!is.na(.))))
data$Standing <- c(4, 14, 13, 9, 18, 3, 12, 16, 17, 8, 2, 1, 6, 11, 20, 15, 4, 19, 7, 10)
knitr::include_graphics("pca.png")
knitr::include_graphics("pca_var.png")
knitr::include_graphics("knn.png")
knitr::include_graphics("importance.png")
knitr::include_graphics("importance.png")
